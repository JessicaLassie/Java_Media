package fr.jl.boundaries;

import fr.jl.daos.ActeurDAO;
import fr.jl.entities.Acteur;
import fr.jl.entities.Globale;
import java.sql.Connection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jessica
 */
public class JifActeurs extends javax.swing.JInternalFrame {

    private Connection cnx;
    private DefaultTableModel ldtm;

    /**
     * Creates new form JifAjouter
     */
    public JifActeurs() {
        initComponents();
        // Titre de la fenetre
        setTitle("Acteurs");
        // Ouverture de la fenetre en premier plan
        setVisible(true);
        // Taille de la fenetre
        setSize(975, 500);
        // Connexion à la BD
        cnx = Globale.getCnx();
        // Affichage de la table acteur dans la jTable
        try {
            // Recuperation du modèle de la jTable
            ldtm = (DefaultTableModel) jTableActeurs.getModel();
        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
        // Remplissage tableau
        getActors();
    }

    // Affichage de tous les acteurs dans la jTable
    private void getActors() {
        // Initialisation de la jTable à 0 en partant de la fin
        for (int i = ldtm.getRowCount() - 1; i >= 0; i--) {
            ldtm.removeRow(i);
        }
        try {
            // Déclaration de l'utilisation d'un tableau d'objet
            Object[] tLigne;
            // Déclaration de l'utilisation d'un objet DAO
            ActeurDAO dao = new ActeurDAO(cnx);
            // Récupération du résultat du selectAll dans une liste
            List<Acteur> liste = dao.selectAll();
            // Parcours de la liste
            for (int i = 0; i < liste.size(); i++) {
                // Récupération des valeurs de i dans la liste
                Acteur acteur = liste.get(i);
                // Définition du nombre d'objets dans le tableau
                tLigne = new Object[1];
                // Récupération des valeurs trouvées
                tLigne[0] = acteur.getNomActeur();
                // Ajout des valeurs trouvées dans la jTable
                ldtm.addRow(tLigne);
            }
            // Calcul du nombre de lignes dans la jTable
            int nbLigne = ldtm.getRowCount();
            // Affichage du nombre de ligne dans le jLabel
            jLabelMessage.setText("Nombre d'acteurs : " + Integer.toString(nbLigne));
        } catch (Exception e) {
            System.out.println(e.getMessage());
            // Affichage d'une boite de dialogue indiquant l'erreur
            JOptionPane message;
            message = new JOptionPane();
            message.showMessageDialog(null, "Erreur de chargement de la base de donnée", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableActeurs = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldActeur = new javax.swing.JTextField();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jTableActeurs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Acteur"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableActeurs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableActeursMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableActeurs);

        jLabel1.setText("Acteur :");

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldActeur, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAjouter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonModifier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSupprimer))
                    .addComponent(jLabelMessage))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldActeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelMessage)
                .addGap(0, 123, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableActeursMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableActeursMouseClicked
        // Recupération du numéro de la ligne selectionnée
        int LiSelectionnee = jTableActeurs.getSelectedRow();
        // Récupération de la valeur dans la ligne selectionnée
        String lsActeur = jTableActeurs.getValueAt(LiSelectionnee, 0).toString();
        // Insertion de la valeur de la ligne selectionnée dans le champs
        jTextFieldActeur.setText(lsActeur);
    }//GEN-LAST:event_jTableActeursMouseClicked

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // Suppression d'un acteur
        // Test si une ligne est bien selectionnée
        if (jTextFieldActeur.getText().isEmpty()) {
            // Affichage d'une boite de dialogue indiquant l'erreur
            JOptionPane message;
            message = new JOptionPane();
            message.showMessageDialog(null, "Vous devez selectionner un acteur", "Erreur", JOptionPane.ERROR_MESSAGE);
        } else {
            // Suppression de l'acteur selectionné
            try {
                // Déclaration de l'utilisation d'un objet DAO
                ActeurDAO dao = new ActeurDAO(cnx);
                // Récupération de la valeur du champs
                Acteur a = new Acteur(jTextFieldActeur.getText());
                // Suppression de la valeur
                dao.delete(a);
                // Execution dans la base de données
                cnx.commit();
                // Remise à zéro du champs
                jTextFieldActeur.setText("");
                // Maj tableau
                getActors();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                // Affichage d'une boite de dialogue indiquant l'erreur
                JOptionPane message;
                message = new JOptionPane();
                message.showMessageDialog(null, "Erreur lors de la suppression", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        // Ajout d'un acteur
        // Test si le champs est vide
        if (jTextFieldActeur.getText().isEmpty()) {
            // Affichage d'une boite de dialogue indiquant l'erreur
            JOptionPane message;
            message = new JOptionPane();
            message.showMessageDialog(null, "Veuillez saisir le nom d'un acteur", "Erreur", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Déclaration de l'utilisation d'un objet DAO
                ActeurDAO dao = new ActeurDAO(cnx);
                // Récupération de la valeur du champs
                Acteur a = new Acteur(jTextFieldActeur.getText());
                // Ajout de la valeur
                dao.insert(a);
                // Execution dans la base de données
                cnx.commit();
                // Remise à zéro du champs
                jTextFieldActeur.setText("");
                // Maj tableau
                getActors();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                // Affichage d'une boite de dialogue indiquant l'erreur
                JOptionPane message;
                message = new JOptionPane();
                message.showMessageDialog(null, "Erreur lors de l'ajout", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        // Modification d'un acteur
        // Test si une ligne est bien selectionnée
        if (jTextFieldActeur.getText().isEmpty()) {
            // Affichage d'une boite de dialogue indiquant l'erreur
            JOptionPane message;
            message = new JOptionPane();
            message.showMessageDialog(null, "Vous devez selectionner un acteur", "Erreur", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Déclaration de l'utilisation d'un objet DAO
                ActeurDAO dao = new ActeurDAO(cnx);
                // Recupération du numéro de la ligne selectionnée
                int LiSelectionnee = jTableActeurs.getSelectedRow();
                // Récupération de la valeur dans la ligne selectionnée
                String lsActeur = jTableActeurs.getValueAt(LiSelectionnee, 0).toString();
                // Récupération de l'acteur selectionné
                Acteur acteur = dao.selectOne(lsActeur);
                // Récupération de la valeur du champs
                Acteur a = new Acteur(acteur.getIdActeur(), jTextFieldActeur.getText());
                // Modification de la valeur
                dao.update(a);
                // Execution dans la base de données
                cnx.commit();
                // Remise à zéro du champs
                jTextFieldActeur.setText("");
                // Maj tableau
                getActors();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                // Affichage d'une boite de dialogue indiquant l'erreur
                JOptionPane message;
                message = new JOptionPane();
                message.showMessageDialog(null, "Erreur lors de la modification", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableActeurs;
    private javax.swing.JTextField jTextFieldActeur;
    // End of variables declaration//GEN-END:variables
}
